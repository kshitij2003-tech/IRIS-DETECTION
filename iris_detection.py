# -*- coding: utf-8 -*-
"""IRIS DETECTION

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O_bUoa-LhWtsvQ14RknkL3IjsnX8lwfN

Step-1 Install Dependencies
"""

!pip install gradio numpy scikit-learn tensorflow pandas

"""Step-2 Import required libraries"""

import gradio as gr

import numpy as np

import pandas as pd

from sklearn.datasets import load_iris

from sklearn.model_selection import train_test_split

from tensorflow.keras.models import Sequential

from tensorflow.keras.layers import Dense

from tensorflow.keras.utils import to_categorical

"""Step - 3 Load The Dataset"""

iris = load_iris()

X, y = iris.data, iris.target # X: Features, y: Target labels

target_names = iris.target_names # ['setosa', 'versicolor', 'virginica']

"""Step - 4 Display the Dataset (Top 5 Rows)"""

df = pd.DataFrame(X, columns=iris.feature_names) # Convert to DataFrame

df['species'] = y # Add species column

df['species'] = df['species'].map({0: 'Setosa', 1: 'Versicolor', 2: 'Virginica'}) # Map label

#Show the first 5 rows
print(df.head())

"""Step - 5 Convert Labels to One-Hot Encoding"""

y = to_categorical(y, num_classes=3)

"""Step - 6 Split the Dataset"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""Step -7 Build the ANN Model"""

model = Sequential([
    Dense(10, activation ='relu', input_shape=(4,)), #Input layer (4 features)

    Dense(8, activation ='relu'), # Hidden layer with 8 neurons

    Dense(3, activation='softmax') # Output layer (3 classes)

])

"""Step-8 Compile and Train the Model"""

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

model.fit(X_train, y_train, epochs=100, batch_size=5, verbose=0)

"""Step-9 Define Prediction Function"""

def predict_iris(sepal_length, sepal_width, petal_length, petal_width):
  features= np.array([[sepal_length, sepal_width, petal_length, petal_width]])
  prediction= model.predict(features) # Predict class probabilities
  predicted_class = np.argmax(prediction) # Get the class with highest probability
  return f" Predicted Flower: {target_names[predicted_class]}"

"""Step-10 Design stylish Gradio UI"""

iface = gr.Interface(
    fn=predict_iris,
    inputs=[
        gr.Number(label="Sepal Length (cm)"),
        gr.Number(label="Sepal Width (cm)"),
        gr.Number(label="Petal Length (cm)"),
        gr.Number(label="Petal Width (cm)")
    ],
    outputs="text",
    title="Iris Flower Species Prediction",
    description="Enter the flower measurements and let the AI predict the Iris species!",
    theme="compact",  # Stylish UI
)

iface.launch()